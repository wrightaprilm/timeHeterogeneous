# We also use a discretized gamma distribution of rate categories #
# again, the shape parameter is drawn from an exponential prior #
alpha_morpho ~ dnExponential( 1.0 )
rates_morpho := fnDiscretizeGamma( alpha_morpho, alpha_morpho, 4 )

moves[mvi++] = mvScale(alpha_morpho, lambda=0.01, weight=1.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=0.1,  weight=1.0)
moves[mvi++] = mvScale(alpha_morpho, lambda=1,    weight=1.0)


clock_morpho ~ dnExponential(1.0)

moves[mvi++] = mvScale(clock_morpho, lambda=0.01, weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=0.1,  weight=4.0)
moves[mvi++] = mvScale(clock_morpho, lambda=1,    weight=4.0)



n_max_states <- 8
idx = 1
d_morph_bystate[1] <- morpho
for (i in 2:n_max_states) {
    # make local tmp copy of data
    d_morph_bystate[i] <- morpho

    # only keep character blocks with state space equal to size i
    d_morph_bystate[i].setNumStatesPartition(i)

    # get number of characters per character size wth i-sized states
    nc = d_morph_bystate[i].nchar()

    # for non-empty character blocks
    if (nc > 0) {

        # make i-by-i rate matrix
        q[idx] <- fnJC(i)

        # create model of evolution for the character block
        m_morph[idx] ~ dnPhyloCTMC( tree=fbd_tree,
                                    Q=q[idx],
                                    nSites=nc,
                                    branchRates=clock_morpho,
                                    siteRates=rates_morpho,
                                    type="Standard")

        # attach the data
        m_morph[idx].clamp(d_morph_bystate[i])

        # increment counter
        idx = idx + 1
    }
}
